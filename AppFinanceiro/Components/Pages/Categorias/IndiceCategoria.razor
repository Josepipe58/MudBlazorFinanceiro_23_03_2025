@page "/categoria"
@using Application.Abstractions.ConsultasAbstractions

<MudCard Elevation="25">    
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Primary">Página Inicial de Categorias</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudButton Size="Size.Large" Variant="Variant.Text" Color="Color.Primary" Href="@($"categoria/adicionar")">Adicionar Nova Categoria</MudButton>
</MudCard>
@if (ListaDeCategorias == null)
{
    <MudProgressCircular Color="Color.Error" Indeterminate="true" />
    <h2 style="color:indianred">Ocorreu um erro...</h2>
}
else
{
    <MudTable Items="ListaDeCategorias" Elevation="0" FixedHeader="@fixar_cabecalho" FixedFooter="@fixar_rodape" 
        Height="@(fixar_cabecalho || fixar_rodape ?"600px":"")">      
        <HeaderContent>            
            <MudTh>Código</MudTh>
            <MudTh>Nome da Categoria</MudTh>           
            <MudTh>Editar | Excluir</MudTh>
        </HeaderContent>
        <RowTemplate Context="categoria">            
            <MudTd DataLabel="id">@categoria.Id</MudTd>
            <MudTd DataLabel="nomecategoria">@categoria.NomeCategoria</MudTd>
            <MudTd DataLabel="">
                <MudFab Href="@($"categoria/editar?id={categoria.Id}")" Color="Color.Default" StartIcon="@Icons.Material.Filled.Edit"
                Size="Size.Small" IconSize="Size.Small"></MudFab>
                <MudFab @onclick="@(e=> ConfirmarExcluir(categoria.Id))" Color="Color.Default" StartIcon="@Icons.Material.Filled.Delete"
                Size="Size.Small" IconSize="Size.Small"></MudFab>
            </MudTd>
        </RowTemplate>
        <FooterContent>           
            <MudTh>Código</MudTh>
            <MudTh>Nome da Categoria</MudTh>
            <MudTh>Editar | Excluir</MudTh>
        </FooterContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{25, 50, 100}" />
        </PagerContent>
    </MudTable>
    <MudSwitch @bind-Value="fixar_cabecalho" Color="Color.Primary">Fixar Cabeçalho</MudSwitch>
    <MudSwitch @bind-Value="fixar_rodape" Color="Color.Primary">Fixar Rodapé</MudSwitch>
}
@code{

    private Categoria Categoria { get; set; } = new Categoria();
    private IEnumerable<Categoria> ListaDeCategorias = new List<Categoria>();
    bool fixar_cabecalho = true;
    bool fixar_rodape = false;

    protected override async Task OnInitializedAsync()
    {
        await ObterCategorias();       
    }

    private async Task<IEnumerable<Categoria>> ObterCategorias()
    {
        ListaDeCategorias = await categoriaService.ObterCategorias();
        return ListaDeCategorias;
    }

    private async Task ConfirmarExcluir(int id)
    {
        bool? result = await dialogService.ShowMessageBox(
        $"Você tem certeza que deseja excluir esse item {id} ?",
        $"Cuidado! Porque a exclusão dele, não pode ser desfeita!",
        yesText: "Excluir", cancelText: "Cancelar");

        if (result ?? false)
        {
            await Excluir(id);
        }
        else
        {
            NavigationManager.NavigateTo("/categoria");
            await ObterCategorias();
        }
    }

    private async Task Excluir(int id)
    {
        await categoriaService.ExcluirCategoria(id);
        Categoria = new Categoria();
        snackBar.Add("Categoria excluída com sucesso!", Severity.Error);        
        await ObterCategorias();
        NavigationManager.NavigateTo("/categoria");
    }
}

