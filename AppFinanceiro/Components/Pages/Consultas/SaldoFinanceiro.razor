@page "/saldofinanceiro"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))" />
                <div class="d-flex">
                    <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                        <MudRadio Value="@("Personal")">Personal</MudRadio>
                        <MudRadio Value="@("Professional")">Professional</MudRadio>
                    </MudRadioGroup>
                </div>
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DropShadow="false" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
}

@* <MudText Typo="Typo.h6" Color="Color.Default" Align="Align.Justify" GutterBottom>
    <p>
        <a style="color:aqua">| Disponível na Carteira > @carteira.ToString("c") |</a>
        <a style="color:aliceblue">| Saldo da Poupança > @carteira.ToString("c") |</a>
        <a style="color:palegreen">| Saldo da LCI > @carteira.ToString("c") |</a>
    </p>
</MudText> *@

@*
    <MudTable Items="ListaDeMeses" Elevation="0">
    <HeaderContent>
        <MudTh>Janeiro  </MudTh>
        <MudTh>Fevereiro</MudTh>
        <MudTh>Março    </MudTh>
        <MudTh>Abril    </MudTh>
        <MudTh>Maio     </MudTh>
        <MudTh>Junho    </MudTh>
        <MudTh>julho    </MudTh>
        <MudTh>Agôsto   </MudTh>
        <MudTh>Setembro</MudTh>
        <MudTh>Outubro </MudTh>
        <MudTh>Novembro</MudTh>
        <MudTh>Dezembro</MudTh>
        <MudTh>Total Geral</MudTh>
    </HeaderContent>
    <RowTemplate Context="Meses">
        <MudTd DataLabel="Janeiro">@Meses.Janeiro</MudTd>
        <MudTd DataLabel="Fevereiro">@Meses.Fevereiro</MudTd>
        <MudTd DataLabel="Março">@Meses.Marco</MudTd>
        <MudTd DataLabel="Abril">@Meses.Abril</MudTd>
        <MudTd DataLabel="Maio">@Meses.Maio</MudTd>
        <MudTd DataLabel="Junho">@Meses.Junho</MudTd>
        <MudTd DataLabel="Julhoo">@Meses.Julho</MudTd>
        <MudTd DataLabel="Agôsto">@Meses.Agosto</MudTd>
        <MudTd DataLabel="Setembro">@Meses.Setembro</MudTd>
        <MudTd DataLabel="Outubro">@Meses.Outubro</MudTd>
        <MudTd DataLabel="Nonembro">@Meses.Novembro</MudTd>
        <MudTd DataLabel="Dezembro">@Meses.Dezembro</MudTd>
        <MudTd DataLabel="Dezembro">@Meses.TotalAno</MudTd>
    </RowTemplate>    
</MudTable>
*@


@code {
   
    
    /*
    public SaldoFinanceiroCPIService CarteiraService = new();
    public decimal carteira;

    public int ano;    
    public Meses meses = new();

    public ListaDeMeses ListaDeMeses = new();

    protected override void OnInitialized()
    {
        carteira = saldoFinanceiroCPIService.SaldoDaCarteira();
        ListaDeMeses = relatorioDespesaService.RelatorioDeDespesasGeraisService(2025);
    }*/
}
