@page "/despesa"

@* <MudDialogProvider />
<MudSnackbarProvider /> *@

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Primary">Página Inicial de Despesas</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudButton Size="Size.Large" Variant="Variant.Text" Color="Color.Primary" Href="@($"despesa/adicionar")">Adicionar Nova Despesa</MudButton>
</MudCard>
<MudTable Elevation="0" Striped="false" Items="ListaDeDespesas" Filter="new Func<Despesa, bool>(Pesquisar)" FixedHeader="@fixar_cabecalho"
    FixedFooter="@fixar_rodape" Height="@(fixar_cabecalho || fixar_rodape ?"600px":"")">
    <ToolBarContent>       
        <MudTextField @bind-Value="criterio" Placeholder="Pesquisar despesas..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0">
        </MudTextField>        
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Código</MudTh>
        <MudTh>Nome da Categoria</MudTh>
        <MudTh>Descrição</MudTh>
        <MudTh>Valor</MudTh>        
        <MudTh>Data</MudTh> 
        <MudTh>Tipo</MudTh>
        <MudTh>Operação</MudTh>
    </HeaderContent>
    <RowTemplate Context="Despesa">
        <MudTd DataLabel="Código">@Despesa.Id</MudTd>
        <MudTd DataLabel="Nome da Categoria">@Despesa.NomeCategoria</MudTd>
        <MudTd DataLabel="Descrição">@Despesa.Descricao</MudTd>
        <MudTd DataLabel="Valor">@Despesa.Valor.ToString("c")</MudTd>
        <MudTd DataLabel="Data">@Convert.ToDateTime(@Despesa.Data).ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="tipo">@Despesa.Tipo</MudTd>
        <MudTd DataLabel="">
            <MudButton Variant="Variant.Text" Color="Color.Default" Href="@($"despesa/editar?id={Despesa.Id}")" 
            StartIcon="@Icons.Material.Filled.ModeEditOutline">Editar</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Default" @onclick="@(e=> ConfirmarExcluir(Despesa.Id))" 
                StartIcon="@Icons.Material.Filled.DeleteOutline">Excluir</MudButton>
        </MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTh>Código</MudTh>
        <MudTh>Nome da Categoria</MudTh>
        <MudTh>Descrição</MudTh>
        <MudTh>Valor</MudTh>
        <MudTh>Data</MudTh>
        <MudTh>Tipo</MudTh>
        <MudTh>Operação</MudTh>
    </FooterContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{25, 50, 100}" />
    </PagerContent>
</MudTable>
<MudSwitch @bind-Value="fixar_cabecalho" Color="Color.Primary">Fixar Cabeçalho</MudSwitch>
<MudSwitch @bind-Value="fixar_rodape" Color="Color.Primary">Fixar Rodapé</MudSwitch>
@code{
    private Despesa Despesa { get; set; } = new Despesa();
    private IEnumerable<Despesa> ListaDeDespesas = new List<Despesa>();
    private string criterio = "";
    bool fixar_cabecalho = true;
    bool fixar_rodape = false;    

    protected override async Task OnInitializedAsync()
    {
        await ObterDespesas();
    }

    private async Task<IEnumerable<Despesa>> ObterDespesas()
    {
        ListaDeDespesas = await despesaService.ObterListaDeDespesas();
        return ListaDeDespesas;
    }

    private async Task ConfirmarExcluir(int id)
    {
        bool? result = await dialogService.ShowMessageBox(
        $"Você tem certeza que deseja excluir esse item {id} ?",
        $"Cuidado! Porque a exclusão dele, não pode ser desfeita!",
        yesText: "Excluir", cancelText: "Cancelar");

        if (result ?? false)
        {
            await Excluir(id);
        }
        else
        {
            NavigationManager.NavigateTo("/despesa");
            await ObterDespesas();
        }
    }

    private async Task Excluir(int id)
    {
        await despesaService.ExcluirDespesa(id);
        Despesa = new Despesa();
        snackBar.Add("Despesa excluída com sucesso.", Severity.Error);
        NavigationManager.NavigateTo("/despesa");
        await ObterDespesas();
    }

    private bool Pesquisar(Despesa despesa)
    {
        if (string.IsNullOrWhiteSpace(criterio)) return true;

        if (despesa.NomeCategoria!.Contains(criterio, StringComparison.OrdinalIgnoreCase)
           || despesa.Descricao!.Contains(criterio, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
}

