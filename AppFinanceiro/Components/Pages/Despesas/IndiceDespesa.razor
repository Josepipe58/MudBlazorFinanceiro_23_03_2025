@page "/despesa"

<MudCard Elevation="25" Class="d-flex align-top flex-grow-1 border border-solid mud-border-default pa-2 ">
    <MudText Typo="Typo.h5" Color="Color.Info" Align="Align.Center">
        Página Inicial de Despesas
    </MudText>
    <MudStack row AlignItems="AlignItems.Center" Style="width: 1200px">
        <MudButton Size="Size.Medium" Variant="Variant.Filled" Color="Color.Info" Href="@($"despesa/adicionar")">Adicionar Nova Despesa</MudButton>
        <MudStack row AlignItems="AlignItems.Start" Style="width: 200px">
            <MudSelect T="BuscarAno" Label="Selecione o Ano" Variant="Variant.Outlined" AdornmentColor="Color.Primary" ValueChanged="AnoSelecionado"
                       Margin="Margin.Dense" Style="width: 200px">
                @foreach (var ano in BancoDeListas.TAnos)
                {
                    <MudSelectItem T="BuscarAno" Value="@ano">@ano.Ano</MudSelectItem>
                }
            </MudSelect>
        </MudStack>
        <MudText Color="Color.Default" Align="Align.End" Class="mx-auto pa-1">Disponível na Carteira > @carteira.ToString("c")</MudText>
    </MudStack>
</MudCard>
<MudCard Elevation="25" Class="d-flex align-top flex-grow-1 border border-solid mud-border-default pa-2 ">
    <MudText Color="Color.Info" Align="Align.Center">
        Despesa Geral Por Mês e Ano
    </MudText>
    @if (SomarValoresDeDespesa == null)
    {
        <MudProgressCircular Color="Color.Error" Indeterminate="true" />
        <h3 style="color:indianred">Ocorreu um erro...</h3>
    }
    else
    {
        <MudTable Items="SomarValoresDeDespesa" Elevation="0">
            <HeaderContent>
                <MudTh>Janeiro  </MudTh>
                <MudTh>Fevereiro</MudTh>
                <MudTh>Março    </MudTh>
                <MudTh>Abril    </MudTh>
                <MudTh>Maio     </MudTh>
                <MudTh>Junho    </MudTh>
                <MudTh>julho    </MudTh>
                <MudTh>Agôsto   </MudTh>
                <MudTh>Setembro</MudTh>
                <MudTh>Outubro </MudTh>
                <MudTh>Novembro</MudTh>
                <MudTh>Dezembro</MudTh>
                <MudTh>Total Geral</MudTh>
            </HeaderContent>
            <RowTemplate Context="Meses">
                <MudTd DataLabel="Janeiro">@Meses.Janeiro</MudTd>
                <MudTd DataLabel="Fevereiro">@Meses.Fevereiro</MudTd>
                <MudTd DataLabel="Março">@Meses.Marco</MudTd>
                <MudTd DataLabel="Abril">@Meses.Abril</MudTd>
                <MudTd DataLabel="Maio">@Meses.Maio</MudTd>
                <MudTd DataLabel="Junho">@Meses.Junho</MudTd>
                <MudTd DataLabel="Julhoo">@Meses.Julho</MudTd>
                <MudTd DataLabel="Agôsto">@Meses.Agosto</MudTd>
                <MudTd DataLabel="Setembro">@Meses.Setembro</MudTd>
                <MudTd DataLabel="Outubro">@Meses.Outubro</MudTd>
                <MudTd DataLabel="Nonembro">@Meses.Novembro</MudTd>
                <MudTd DataLabel="Dezembro">@Meses.Dezembro</MudTd>
                <MudTd DataLabel="Dezembro">@Meses.TotalAno</MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudCard>
<MudCard Elevation="25" Class="d-flex align-top flex-grow-1 border border-solid mud-border-default pa-3 ">
    <MudStack AlignItems="AlignItems.End">
        <MudTextField @bind-Value="criterio" Placeholder="Pesquisar despesas..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Style="width: 400px">
        </MudTextField>
    </MudStack>
    @if (ListaDeDespesas == null)
    {
        <MudProgressCircular Color="Color.Error" Indeterminate="true" />
        <h2 style="color:indianred">Ocorreu um erro...</h2>
    }
    else
    {
        <MudTable Elevation="0" Striped="false" Items="ListaDeDespesas" Filter="new Func<Despesa, bool>(Pesquisar)" FixedHeader="@fixar_cabecalho"
                  Height="@(fixar_cabecalho ?"460px":"")">
            <HeaderContent>
                <MudTh>Código</MudTh>
                <MudTh>Nome da Categoria</MudTh>
                <MudTh>Descrição</MudTh>
                <MudTh>Valor</MudTh>
                <MudTh>Data</MudTh>
                <MudTh>Tipo</MudTh>
                <MudTh>Operação</MudTh>
            </HeaderContent>
            <RowTemplate Context="Despesa">
                <MudTd DataLabel="Código">@Despesa.Id</MudTd>
                <MudTd DataLabel="Nome da Categoria">@Despesa.NomeCategoria</MudTd>
                <MudTd DataLabel="Descrição">@Despesa.Descricao</MudTd>
                <MudTd DataLabel="Valor">@Despesa.Valor.ToString("c")</MudTd>
                <MudTd DataLabel="Data">@Convert.ToDateTime(@Despesa.Data).ToString("dd/MM/yyyy")</MudTd>
                <MudTd DataLabel="tipo">@Despesa.Tipo</MudTd>
                <MudTd DataLabel="">
                    <MudButton Variant="Variant.Text" Color="Color.Default" Href="@($"despesa/editar?id={Despesa.Id}")"
                               StartIcon="@Icons.Material.Filled.ModeEditOutline">Editar</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Default" @onclick="@(e=> ConfirmarExcluir(Despesa.Id))"
                               StartIcon="@Icons.Material.Filled.DeleteOutline">Excluir</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager RowsPerPageString="Linhas por página: " HorizontalAlignment="HorizontalAlignment.Start" PageSizeOptions="new int[]{50, 100, 200}" />
            </PagerContent>
        </MudTable>
    }
</MudCard>
    @* <MudChip T="string" Style="height:8px; width: 1650px; background-color:steelblue"></MudChip> *@
@code{
    private Despesa Despesa { get; set; } = new Despesa();
    public BuscarAno BuscarAno { get; set; } = new BuscarAno(); 
    public SomarValoresDeDespesa SomarValoresDeDespesa = new SomarValoresDeDespesa();
    private IEnumerable<Despesa> ListaDeDespesas = new List<Despesa>();
    public decimal carteira;
    private string criterio = "";
    bool fixar_cabecalho = true;     
    

    protected override async Task OnInitializedAsync()
    {
        ListaDeDespesas = await despesaService.ObterListaDeDespesasPorAno(Convert.ToInt32(DateTime.Now.Year));
        SomarValoresDeDespesa = relatorioDespesaService.RelatorioDeDespesasGeraisService(Convert.ToInt32(DateTime.Now.Year));
        carteira = saldoFinanceiroCPIService.SaldoDaCarteira();        
    }

    private async Task AnoSelecionado(BuscarAno ano)
    {       
        SomarValoresDeDespesa =  relatorioDespesaService.RelatorioDeDespesasGeraisService(ano.Ano);
        ListaDeDespesas = await despesaService.ObterListaDeDespesasPorAno((ano.Ano));
        BuscarAno = new BuscarAno();
    }

    private async Task ConfirmarExcluir(int id)
    {
        Despesa = await despesaService.ObterDespesaPorId(id);
        if (Despesa.Id <= 0)
        {
            NavigationManager.NavigateTo("notfound");
        }
        BuscarAno.Ano = Despesa.Data.Value.Year;
        
        bool? result = await dialogService.ShowMessageBox(
       "Atenção!", $"Você tem certeza que deseja excluir esse item {id} ?",
        yesText: "Excluir", cancelText: "Cancelar");

        if (result ?? false)
        {
            await Excluir(id);
        }
        else
        {
            NavigationManager.NavigateTo("/despesa");
            await AnoSelecionado(BuscarAno);
        }
    }

    private async Task Excluir(int id)
    {
        await despesaService.ExcluirDespesa(id);
        Despesa = new Despesa();
        snackBar.Add("Despesa excluída com sucesso.", MudBlazor.Severity.Error);
        NavigationManager.NavigateTo("/despesa");
        await AnoSelecionado(BuscarAno);
    }

    private bool Pesquisar(Despesa despesa)
    {
        if (string.IsNullOrWhiteSpace(criterio)) return true;

        if (despesa.NomeCategoria!.Contains(criterio, StringComparison.OrdinalIgnoreCase)
           || despesa.Descricao!.Contains(criterio, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
}
